sales2
abs(97+0-98 + 0+66-122 + 237+0-247 + 0+0-31 + 38+0-211) /
sum(window(sales2, start = c(2014, 6)))
abs(97+0-98 + 0+66-122 + 237+0-247 + 0+0-31 + 38+0-211) /
sum(window(sales2, start = c(2014, 6)))
s1
ip1
order1
`fagro.YU81824-025`
ip1agro
order1agro
sales1
# AGROTECH's policy ---
`fagro.YU81824-025` <- ts(c(0, 0, ceiling(1.3 * window(`ts.demand.YU81824-025`,
start = c(2013, 6),
end = c(2014, 7)))),
start = c(2014, 4), frequency = 12)
ip1agro <- ts(c(257, 534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
start = c(2014, 4), frequency = 12)
order1agro <- ts(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
start = c(2014, 4), frequency = 12)
for (i in 1:14) {
if (i > 2) {
ip1agro[i] <- ip1agro[i-1] + order1agro[i-2] - sales1[i]
if (ip1agro[i] < 0) ip1agro[i] <- 0
}
order1agro[i] <- `fagro.YU81824-025`[i+2] - ip1agro[i]
if (order1agro[i] < 0) order1agro[i] <- 0
}
s1
ip1
order1
`fagro.YU81824-025`
ip1agro
order1agro
sales1
abs(11+0-196 + 0+408-439 + 0+540-551 + 32+87-332) /
sum(window(sales1, start = c(2014, 6)))
abs(93+0-196)/sum(window(sales2, start = c(2014, 6)))
abs(97+0-98 + 0+66-122 + 237+0-247 + 0+0-31 + 38+0-211) /
sum(window(sales2, start = c(2014, 6)))
abs((50+51-211))/sum(window(sales2, start = c(2014, 6)))
fagro.AR50041
`fagro.YU81824-025`
# Inventory control model ------------------------------------------------------
fcastcomp.T19044 <- forecast(ets(train.T19044, model = fitall.T19044,
restrict = FALSE, use.initial.values = TRUE),
h = 14)
y3 <- ceiling(fcastcomp.T19044$mean)
sigma3 <- sqrt(fitall.T19044$sigma2)
z <- qnorm(.97)
s3 <- ceiling(sigma3 * z + y3)
# Add zeros to make ts the same length ---
s3 <- ts(c(0, 0, s3), start = c(2014, 4), frequency = 12)
ip3 <- ts(c(1712, 1447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
start = c(2014, 4), frequency = 12)
order3 <- ts(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), start = c(2014, 4),
frequency = 12)
sales3 <- window(ts.demand.T19044, start = c(2014, 4))
for (i in 1:14) {
if (i > 2) {
ip3[i] <- ip3[i-1] + order3[i-2] - sales3[i]
if (ip3[i] < 0) ip3[i] <- 0
}
order3[i] <- s3[i+2] - ip3[i]
if (order3[i] < 0) order3[i] <- 0
}
# Lost sales %
abs((50+51-211))/sum(window(sales3, start = c(2014, 6)))
# AGROTECH's policy ---
fagro.T19044 <- ts(c(0, 0, ceiling(1.3 * window(ts.demand.T19044,
start = c(2013, 6),
end = c(2014, 7)))),
start = c(2014, 4), frequency = 12)
ip3agro <- ts(c(1712, 1447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
start = c(2014, 4), frequency = 12)
order3agro <- ts(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
start = c(2014, 4), frequency = 12)
for (i in 1:14) {
if (i > 2) {
ip3agro[i] <- ip3agro[i-1] + order3agro[i-2] - sales3[i]
if (ip3agro[i] < 0) ip3agro[i] <- 0
}
order3agro[i] <- fagro.T19044[i+2] - ip3agro[i]
if (order3agro[i] < 0) order3agro[i] <- 0
}
# Lost sales %
abs(97+0-98 + 0+66-122 + 237+0-247 + 0+0-31 + 38+0-211) /
sum(window(sales3, start = c(2014, 6)))
s3
ip3
order3
fagro.T19044
ip3agro
order3agro
sales3
abs(77+0-576 + 0+347-364 + 17+313-420)/sum(window(sales3, start = c(2014, 6)))
903+0-347
903-826
abs(77+0-221 + 0+297-364 + 156+53-311)/sum(window(sales3, start = c(2014, 6)))
s1
ip1
order1
sales1
abs(93+0-196)/sum(window(sales2, start = c(2014, 6)))
abs(93+0-196)/sum(window(sales1, start = c(2014, 6)))
11*3.3
11*3.3 + sum(window(ip1, start = c(2014, 6)))*0.06*76.5 + sum(window(order1, start = c(2014, 6)))*
11*3.3 + sum(window(ip1, start = c(2014, 6)))*0.06*76.5 + sum(window(order1, start = c(2014, 6)))*76.5
`fagro.YU81824-025`
ip1agro
order1agro
abs(11+0-196 + 0+408-439 + 0+540-551 + 32+87-332) /
sum(window(sales1, start = c(2014, 6)))
11*3.3 + sum(window(ip1agro, start = c(2014, 6)))*0.06*76.5 +
sum(window(order1agro, start = c(2014, 6)))*76.5
sales2
s2
ip2
order2
sales2
abs((50+51-211))/sum(window(sales2, start = c(2014, 6)))
12*3.3 + sum(window(ip2agro, start = c(2014, 6)))*0.06*10.26 +
sum(window(order2agro, start = c(2014, 6)))*10.26
fagro.AR50041
ip2agro
order2agro
sales2
abs(97+0-98 + 0+66-122 + 237+0-247 + 0+0-31 + 38+0-211) /
sum(window(sales2, start = c(2014, 6)))
12*3.3 + sum(window(ip2, start = c(2014, 6)))*0.06*10.26 +
sum(window(order2, start = c(2014, 6)))*10.26
9*3.3 + sum(window(ip2agro, start = c(2014, 6)))*0.06*10.26 +
sum(window(order2agro, start = c(2014, 6)))*10.26
s3
ip3
order3
sales3
abs(77+0-576 + 0+347-364 + 17+313-420)/sum(window(sales3, start = c(2014, 6)))
9*3.3 + sum(window(ip3, start = c(2014, 6)))*0.06*4.48 +
sum(window(order3, start = c(2014, 6)))*4.48
fagro.T19044
fagro.AR50041
fagro.T19044
ip3agro
order3agro
abs(77+0-221 + 0+297-364 + 156+53-311)/sum(window(sales3, start = c(2014, 6)))
sales3
abs(77+0-576 + 0+297-364 + 156+53-311)/sum(window(sales3, start = c(2014, 6)))
9*3.3 + sum(window(ip3agro, start = c(2014, 6)))*0.06*4.48 +
sum(window(order3agro, start = c(2014, 6)))*4.48
#--Produces a data.frame with the Source Data+Training Data, Fitted Values+Forecast Values, forecast data Confidence Intervals
funggcast <- function(dn, fcast) {
require(zoo) #needed for the 'as.yearmon()' function
en <- max(time(fcast$mean)) #extract the max date used in the forecast
#Extract Source and Training Data
ds <- as.data.frame(window(dn, end=en))
names(ds) <- 'observed'
ds$date <- as.Date(time(window(dn, end=en)))
#Extract the Fitted Values (need to figure out how to grab confidence intervals)
dfit <- as.data.frame(fcast$fitted)
dfit$date <- as.Date(time(fcast$fitted))
names(dfit)[1] <- 'fitted'
ds <- merge(ds, dfit, all.x=T) #Merge fitted values with source and training data
#Exract the Forecast values and confidence intervals
dfcastn <- as.data.frame(fcast)
dfcastn$date <- as.Date(as.yearmon(row.names(dfcastn)))
names(dfcastn) <- c('forecast','lo80','hi80','lo95','hi95','date')
pd <- merge(ds, dfcastn, all.x=T) #final data.frame for use in ggplot
return(pd)
}
funggcast(ts.demand.AR50041, fcastcomp.AR50041)
?time
time(fcastcomp.AR50041$mean)
funggcast(ts.demand.AR50041, fcastcomp.AR50041)
funggcast(ts.demand.AR50041, fcastcomp.AR50041)
View(funggcast)
View(funggcast)
View(funggcast)
fcastcomp.AR50041
library(dplyr)
library(ggplot2)
library(xlsx)
library(tidyr)
library(lubridate)
library(ggfortify)
library(forecast)
attributes(fcastcomp.AR50041)
?forecast
test <- tbl_df(fcastcomp.AR50041) %>%
select(mean, lower, upper, fitted, x)
?as.data.frame
?as.data.frame.ts
test <- tbl_df(as.data.frame(fcastcomp.AR50041)) %>%
select(mean, lower, upper, fitted, x)
as.data.frame(fcastcomp.AR50041)
str(as.data.frame(fcastcomp.AR50041))
row.names(as.data.frame(fcastcomp.AR50041))
ym(row.names(as.data.frame(fcastcomp.AR50041)))
??"lubridate"
as.Date(row.names(as.data.frame(fcastcomp.AR50041)))
as.yearmon(row.names(as.data.frame(fcastcomp.AR50041)))
as.Date(as.yearmon(row.names(as.data.frame(fcastcomp.AR50041))))
?merge
#--Produces a data.frame with the Source Data+Training Data, Fitted Values+Forecast Values, forecast data Confidence Intervals
funggcast <- function(dn, fcast) {
require(zoo) #needed for the 'as.yearmon()' function
en <- max(time(fcast$mean)) #extract the max date used in the forecast
#Extract Source and Training Data
ds <- as.data.frame(window(dn, end=en))
names(ds) <- 'observed'
ds$date <- as.Date(time(window(dn, end=en)))
#Extract the Fitted Values (need to figure out how to grab confidence intervals)
dfit <- as.data.frame(fcast$fitted)
dfit$date <- as.Date(time(fcast$fitted))
names(dfit)[1] <- 'fitted'
ds <- merge(ds, dfit, all.x=T) #Merge fitted values with source and training data
#Exract the Forecast values and confidence intervals
dfcastn <- as.data.frame(fcast)
dfcastn$date <- as.Date(as.yearmon(row.names(dfcastn)))
names(dfcastn) <- c('forecast','lo80','hi80','lo95','hi95','date')
pd <- merge(ds, dfcastn, all.x=T) #final data.frame for use in ggplot
return(pd)
}
funggcast(ts.demand.AR50041, fcastcomp.AR50041)
dfcast <- funggcast(ts.demand.AR50041, fcastcomp.AR50041)
library(scales)
arpres <- ggplot(data = dfcast, y = observed)
arpres <- ggplot(data = dfcast, y = observed) + geom_line(col = "red")
arpres
ggplot()
?"ggplot"
arpres <- ggplot(data = dfcast, aes(x = date, y = observed) +
geom_line(col = "red") +
geom_line(aes(y = fitted), col = "blue")
arpres
?geom_line
arpres <- ggplot(data = dfcast, aes(x = date, y = observed) +
geom_line(col = "red") +
geom_line(aes(x = date, y = fitted), col = "blue")
ggplot(data = dfcast, aes(x = date, y = observed) +
geom_line(col = "red") +
geom_line(aes(x = date, y = fitted), col = "blue")
ggplot(data = dfcast, aes(x = date, y = observed) +
geom_line(col = "red") +
geom_line(aes(x = date, y = fitted), col = "blue")
ggplot(data = dfcast, aes(x = date, y = observed) +
geom_line(col = "red") +
geom_line(aes(x = date, y = fitted), col = 'blue')
ggplot(data = dfcast, aes(x = date, y = observed) +
geom_line(col = 'red') +
geom_line(aes(x = date, y = fitted), col = 'blue')
arpres + geom_line(col = 'red') +
geom_line(aes(x = date, y = fitted), col = 'blue')
arpres + geom_line(col = 'red') + geom_line(aes(y = fitted), col = 'blue')
arpres <- ggplot(data = dfcast, aes(x = date, y = observed)
arpres + geom_line(col = 'red') + geom_line(aes(y = fitted), col = 'blue')
arpres <- ggplot(dfcast, aes(x = date, y = observed))
arpres + geom_line(col = 'red') + geom_line(aes(y = fitted), col = 'blue')
dfcast
arpres + geom_line() + geom_line(aes(y = fitted), col = 'blue')
arpres + geom_line() + geom_line(aes(y = fitted), col = 'blue') +
geom_line(y = forecast, col = "red")
arpres + geom_line() + geom_line(aes(y = fitted), col = 'blue') +
geom_line(y = forecast, col = 'red')
arpres + geom_line() + geom_line(aes(y = fitted), col = 'blue') +
geom_line(aes(y = forecast), col = "red")
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25)
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25)
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25, col = "red") +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25)
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25)
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) #
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25)
arpres + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25) +
xlab("Χρόνος") + ylab("Ζήτηση") + ggtitle("Πρόβλεψη Ζήτησης AR50041")
abc.plot + geom_line() + xlab("Αθροιστικό ποσοστό % κωδικών") +
ylab("Αθροιστικό ποσοστό % ετήσιας αξίας αποθεμάτων") +
annotate("rect", xmin = 0, xmax = 1293/22068*100, ymin = 0, ymax = 80,
alpha = .2) +
annotate("rect", xmin = 0, xmax = (1293+2391)/22068*100, ymin = 0,
ymax = 95, alpha = .2) +
annotate("rect", xmin = 0, xmax = 100, ymin = 0, ymax = 100, alpha = .2) +
annotate("text", x = (1293/22068)/2*100, y = 80/2, label = "Κωδικοί A",
angle = 90) +
annotate("text", x = (1293/22068+(2391/22068)/2)*100, y = 95/2,
label = "Κωδικοί B", angle = 90) +
annotate("text", x = (2391/22068+(1-(2391/22068))/2)*100, y = 50,
label = "Κωδικοί C") +
scale_y_continuous(breaks = c(0, 80, 95, 100)) +
scale_x_continuous(breaks = round(c(0, 1293/22068*100, (1293+2391)/22068*100,
100), 2))
plot.AR50041 + ggtitle("AR50041") + xlab("Χρόνος") + ylab("Πωλήσεις")
policyAR50041 <- cbind(s2, ip2, order2, sales2)
policyAR50041
policyAR50041$date <- as.Date(as.yearmon(row.names(policyAR50041)))
policyAR50041
policyAR50041
policyAR50041 <- cbind(s2, ip2, order2, sales2)
policyAR50041
as.Date(as.yearmon(row.names(policyAR50041)))
str(policyAR50041)
as.data.frame(policyAR50041)
as.data.frame(fcastcomp.AR50041)
fcastcomp.T19044
policyAR50041
autoplot(policyAR50041)
autoplot(s2)
autoplot(s2) + geom_line(ip2)
?geom_line
?autoplot
?"ggplot"
ggplot(s2)
ggplot(s2) +geom_line()
attributes(s2)
s2$tsp
str(s2)
autoplot(fcastcomp.AR50041)
library(ggfortify)
autoplot(fcastcomp.AR50041)
?autoplot
?melt
melt(s2)
library
library(reshape2)
melt(s2)
s2
policyAR50041
row.names(policyAR50041)
str()
str(policyAR50041)
?as.yearmon
?as.Date
?ymd
date2 <- ymd(c("2014-4-1", "2014-5-1", "2014-6-1", "2014-7-1", "2014-8-1", "2014-9-1", "2014-10-1", "2014-11-1", "2014-12-1", "2015-1-1", "2015-2-1", "2015-3-1", "2015-4-1", "2015-5-1", "2015-6-1", "2015-7-1"))
date2
policyAR50041 <- as.data.frame(cbind(s2, ip2, order2, sales2))
policyAR50041
policyAR50041 <- bind_cols(date2, policyAR50041)
date2 <- as.data.frame(ymd(c("2014-4-1", "2014-5-1", "2014-6-1", "2014-7-1",
"2014-8-1", "2014-9-1", "2014-10-1", "2014-11-1",
"2014-12-1", "2015-1-1", "2015-2-1", "2015-3-1",
"2015-4-1", "2015-5-1", "2015-6-1", "2015-7-1")))
policyAR50041 <- bind_cols(date2, policyAR50041)
policyAR50041
date2
date2 <- ymd(c("2014-4-1", "2014-5-1", "2014-6-1", "2014-7-1", "2014-8-1",
"2014-9-1", "2014-10-1", "2014-11-1", "2014-12-1", "2015-1-1",
"2015-2-1", "2015-3-1", "2015-4-1", "2015-5-1", "2015-6-1",
"2015-7-1"))
date2
policyAR50041 <- cbind(date2, policyAR50041)
policyAR50041
str(date2)
str(policyAR50041)
policyAR50041 <- as.data.frame(cbind(s2, ip2, order2, sales2))
date2 <- ymd(c("2014-4-1", "2014-5-1", "2014-6-1", "2014-7-1", "2014-8-1",
"2014-9-1", "2014-10-1", "2014-11-1", "2014-12-1", "2015-1-1",
"2015-2-1", "2015-3-1", "2015-4-1", "2015-5-1", "2015-6-1",
"2015-7-1"))
policyAR50041 <- cbind(date2, policyAR50041)
policyAR50041
ggplot(data = policyAR50041) + geom_line(aes(x = date2, y = s2))
ggplot(data = policyAR50041) + geom_line(aes(x = date2, y = s2)) + geom_line(aes(y = ip2))
ggplot(policyAR50041, aes(x = date2)) + geom_line(aes(y = s2)) + geom_line(aes(y = ip2))
pplotAR50041 <- ggplot(policyAR50041, aes(x = date2))
?"ggplot"
?aes
pplotAR50041 + geom_line(aes(y = s2, color = "red")) + geom_line(aes(y = ip2))
pplotAR50041 + geom_line(aes(y = s2, color = "red")) + geom_line(aes(y = ip2, color = "blue"))
pplotAR50041 + geom_line(aes(y = s2, color = "S")) + geom_line(aes(y = ip2, color = "blue")) +
pplotAR50041 + geom_line(aes(y = s2, color = "S")) + geom_line(aes(y = ip2, color = "blue"))
pplotAR50041 + geom_line(aes(y = s2, color = "red")) + geom_line(aes(y = ip2, color = "blue"))
pplotAR50041 + geom_line(aes(y = s2)) + geom_line(aes(y = ip2, color = "blue"))
pplotAR50041 <- ggplot(policyAR50041, aes(x = date2, color = y))
pplotAR50041 + geom_line(aes(y = s2)) + geom_line(aes(y = ip2))
pplotAR50041 <- ggplot(policyAR50041, aes(x = date2, color))
pplotAR50041 + geom_line(aes(y = s2)) + geom_line(aes(y = ip2))
pplotAR50041 + geom_line(aes(y = s2, color = "red")) + geom_line(aes(y = ip2, color = "blue"))
pplotAR50041 + geom_line(aes(y = s2, color = "red")) + geom_line(aes(y = ip2, color = "IP"))
pplotAR50041 + geom_line(aes(y = s2, color = "S")) + geom_line(aes(y = ip2, color = "IP"))
pplotAR50041 + geom_line(aes(y = s2, color = "S")) + geom_line(aes(y = ip2, color = "IP")) + geom_line(aes(y = order2, color = "Order"))
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
eom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
guide_legend(title = "Variable")
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
guide_legend(title = "Variable")
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order"))
?labs
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
labs(color = "Variable")
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
geom_line(aes(y = sales2, color = "Sales")) +
labs(color = "Variable")
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
geom_line(aes(y = sales2, color = "Sales")) +
labs(color = "Variable") + ggtitle("Προτεινόμενη Πολιτική") +
xlab("Χρόνος") + ylab("Τεμάχια AR50041")
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
geom_line(aes(y = sales2, color = "Sales")) +
labs(color = "Μεταβλητή") + ggtitle("Προτεινόμενη Πολιτική") +
xlab("Χρόνος") + ylab("Τεμάχια AR50041")
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
geom_line(aes(y = sales2, color = "Sales")) +
labs(color = "Μεταβλητή") + ggtitle("Προτεινόμενη Πολιτική AR50041") +
xlab("Χρόνος") + ylab("Τεμάχια")
abc.plot + geom_line() + xlab("Αθροιστικό ποσοστό % κωδικών") +
ylab("Αθροιστικό ποσοστό % ετήσιας αξίας αποθεμάτων") +
annotate("rect", xmin = 0, xmax = 1293/22068*100, ymin = 0, ymax = 80,
alpha = .2) +
annotate("rect", xmin = 0, xmax = (1293+2391)/22068*100, ymin = 0,
ymax = 95, alpha = .2) +
annotate("rect", xmin = 0, xmax = 100, ymin = 0, ymax = 100, alpha = .2) +
annotate("text", x = (1293/22068)/2*100, y = 80/2, label = "Κωδικοί A (1,293)",
angle = 90) +
annotate("text", x = (1293/22068+(2391/22068)/2)*100, y = 95/2,
label = "Κωδικοί B (2,391)", angle = 90) +
annotate("text", x = (2391/22068+(1-(2391/22068))/2)*100, y = 50,
label = "Κωδικοί C (18,384)") +
scale_y_continuous(breaks = c(0, 80, 95, 100)) +
scale_x_continuous(breaks = round(c(0, 1293/22068*100, (1293+2391)/22068*100,
100), 2))
fcastcomp.L171436 <- forecast(ets(train.L171436, model = fitall.L171436,
restrict = FALSE, use.initial.values = TRUE),
h = 14)
dfcast.L171436 <- funggcast(ts.demand.L171436, fcastcomp.L171436)
dfcast.L171436
pres.L171436 <- ggplot(dfcast, aes(x = date, y = observed))
pres.L171436 + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25) +
xlab("Χρόνος") + ylab("Ζήτηση") + ggtitle("Πρόβλεψη Ζήτησης L171436")
pres.L171436 <- ggplot(dfcast.L171436, aes(x = date, y = observed))
pres.L171436 + geom_line() +
geom_line(aes(y = fitted), col = "blue") +
geom_line(aes(y = forecast), col = "red") +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25) +
xlab("Χρόνος") + ylab("Ζήτηση") + ggtitle("Πρόβλεψη Ζήτησης L171436")
pres.L171436 <- ggplot(dfcast.L171436, aes(x = date, y = observed,
col = "Πωλήσεις"))
pres.L171436 + geom_line() +
geom_line(aes(y = fitted, col = "Προσαρμογή")) +
geom_line(aes(y = forecast, col = "Πρόβλεψη")) +
geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = 0.25) +
geom_ribbon(aes(ymin = lo80, ymax = hi80), alpha = 0.25) +
xlab("Χρόνος") + ylab("Ζήτηση") + ggtitle("Πρόβλεψη Ζήτησης L171436")
pres.L171436 <- ggplot(dfcast.L171436, aes(x = date, y = observed,
col = "Πωλήσεις"))
pres.L171436 + geom_line() +
geom_line(aes(y = fitted, col = "Προσαρμογή")) +
geom_line(aes(y = forecast, col = "Πρόβλεψη")) +
geom_ribbon(aes(ymin = lo95, ymax = hi95, alpha = 0.25)) +
geom_ribbon(aes(ymin = lo80, ymax = hi80, alpha = 0.25)) +
xlab("Χρόνος") + ylab("Ζήτηση") + ggtitle("Πρόβλεψη Ζήτησης L171436")
fcastcomp.L171436$residuals
pplotAR50041 <- ggplot(policyAR50041, aes(x = date2, fill))
pplotAR50041 + geom_line(aes(y = s2, fill = "S")) +
geom_line(aes(y = ip2, fill = "IP")) +
geom_line(aes(y = order2, fill = "Order")) +
geom_line(aes(y = sales2, fill = "Sales")) +
labs(fill = "Μεταβλητή") + ggtitle("Προτεινόμενη Πολιτική AR50041") +
xlab("Χρόνος") + ylab("Τεμάχια")
pplotAR50041 <- ggplot(policyAR50041, aes(x = date2, color))
pplotAR50041 + geom_line(aes(y = s2, color = "S")) +
geom_line(aes(y = ip2, color = "IP")) +
geom_line(aes(y = order2, color = "Order")) +
geom_line(aes(y = sales2, color = "Sales")) +
labs(color = "Μεταβλητή") + ggtitle("Προτεινόμενη Πολιτική AR50041") +
xlab("Χρόνος") + ylab("Τεμάχια")
